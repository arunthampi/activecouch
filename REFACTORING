ActiveCouch is now a very expensive piece of work, especially when tons of objects need to be instantiated, it blows up on Mongrel/Thin and makes a rather big mess.

The biggest refactoring needs to be in object initialization which must be made less expensive. To that end, the following changes are proposed:

1. Remove ActiveCouch::Attribute and ActiveCouch::Association classes.
2. Use duck-typing as much as possible.
3. Use simple hashes as much as possible.

has method
----------

class Person < ActiveCouch::Base
  has :something, :with_default_value => 10
  has :something_else
end

it has to be stored in a hash (called 'attributes') with key as :something and value as 10, for :something_else the value will be nil

For each has method, it will declare an instance variable, for e.g. @something and in the initialize function, it will store the parameter of with_default_value in @something (as 10)


has_many method
---------------

class Person < ActiveCouch::Base
  has_many :dogs
  has_many :petz, :class => Pet
end

this will store dogs in a hash (called 'associations') with the value being the class which is characterized by the association

1. For has_many :dogs, the key will be dogs; value will be Dog
2. For has_many :petz, :class => Pet, the key will be petz; value will be Pet

has_one method
---------------

class Person < ActiveCouch::Base
  has_one :dog
  has_one :pte, :class => Pet
end

this will store ___dogs in a hash (called 'associations') with the value being the class which is characterized by the association

1. For has_many :dogs, the key will be ___dogs; value will be Dog
2. For has_many :petz, :class => Pet, the key will be ___petz; value will be Pet
